{
  "address": "0x6331b6d2A40F1FA0A65CA61f97dfaE8527616C81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_gelato",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_taskTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "txFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "execData",
          "type": "bytes"
        }
      ],
      "name": "ExecSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "callee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "execAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolverAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "resolverData",
          "type": "bytes"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfCallee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "calleeOfTask",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_task",
          "type": "bytes32"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_execSelector",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_resolverAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_resolverData",
          "type": "bytes"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_txFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_callee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_execData",
          "type": "bytes"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "execAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_func",
          "type": "string"
        }
      ],
      "name": "getSelector",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_execAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        }
      ],
      "name": "getTaskId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callee",
          "type": "address"
        }
      ],
      "name": "getTaskIdsByUser",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2708a4ae3fb14642022bb695c202144246080d49ad4cff80da1b496eaf6e8c57",
  "receipt": {
    "to": null,
    "from": "0x8d26D02f7228F2527e226Cc6506B812A736a2CB2",
    "contractAddress": "0x6331b6d2A40F1FA0A65CA61f97dfaE8527616C81",
    "transactionIndex": 0,
    "gasUsed": "1591612",
    "logsBloom": "0x
    "blockHash": "0x4bf0f94d24da6930e9ae77f5dbb8fde2988f62f4f37e791e667e3f3000c280c5",
    "transactionHash": "0x2708a4ae3fb14642022bb695c202144246080d49ad4cff80da1b496eaf6e8c57",
    "logs": [],
    "blockNumber": 10733929,
    "cumulativeGasUsed": "1591612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCc4CcD69D31F9FfDBD3BFfDe49c6aA886DaB98d9",
    "0x7315478b45D9801826C819202fc8B2db55e41504"
  ],
  "solcInputHash": "4f969e9a70bc313f30c7e3719b021258",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gelato\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taskTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"name\":\"ExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"execAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"resolverData\",\"type\":\"bytes\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfCallee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"calleeOfTask\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_task\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_execSelector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_resolverAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_resolverData\",\"type\":\"bytes\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_callee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_execData\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"execAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"}],\"name\":\"getSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_execAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getTaskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callee\",\"type\":\"address\"}],\"name\":\"getTaskIdsByUser\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getSelector(string)\":{\"details\":\"Example: \\\"transferFrom(address,address,uint256)\\\" => 0x23b872dd\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PokeMe2.sol\":\"PokeMe2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\nfunction _transfer(\\n    address payable _to,\\n    address _paymentToken,\\n    uint256 _amount\\n) {\\n    if (_paymentToken == ETH) {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"_transfer: ETH transfer failed\\\");\\n    } else {\\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda43a9e303a5433718ab0c1c67c655f8edccaf842660736b62cf781e6928c51b\",\"license\":\"UNLICENSED\"},\"contracts/GelatoBytes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x439888181cf37ca3f335d9071618a69b9965e8fd87bf0ded0175aa292969296f\",\"license\":\"UNLICENSED\"},\"contracts/Gelatofied.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {_transfer, ETH} from \\\"./FGelato.sol\\\";\\n\\nabstract contract Gelatofied {\\n    address payable public immutable gelato;\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    modifier gelatofy(uint256 _amount, address _paymentToken) {\\n        require(msg.sender == gelato, \\\"Gelatofied: Only gelato\\\");\\n        _;\\n        _transfer(gelato, _paymentToken, _amount);\\n    }\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Gelatofied: Only gelato\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0c30a7b74e2f4139eab3662514ba81f07e84e01169dadac73e1189f6ae3a34a7\",\"license\":\"UNLICENSED\"},\"contracts/PokeMe2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {Gelatofied} from \\\"./Gelatofied.sol\\\";\\nimport {GelatoBytes} from \\\"./GelatoBytes.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {_transfer, ETH} from \\\"./FGelato.sol\\\";\\nimport {TaskTreasury} from \\\"./TaskTreasury.sol\\\";\\n\\ncontract PokeMe2 is Gelatofied {\\n    using SafeERC20 for IERC20;\\n    using GelatoBytes for bytes;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    string public constant version = \\\"2\\\";\\n    mapping(bytes32 => address) public calleeOfTask;\\n    mapping(bytes32 => address) public execAddresses;\\n    mapping(address => mapping(address => uint256)) public balanceOfCallee;\\n    mapping(address => EnumerableSet.Bytes32Set) internal _createdTasks;\\n    address public immutable taskTreasury;\\n\\n    constructor(address payable _gelato, address _taskTreasury)\\n        Gelatofied(_gelato)\\n    {\\n        taskTreasury = _taskTreasury;\\n    }\\n\\n    event TaskCreated(\\n        address callee,\\n        address execAddress,\\n        bytes4 selector,\\n        address resolverAddress,\\n        bytes32 taskId,\\n        bytes resolverData\\n    );\\n    event TaskCancelled(bytes32 taskId);\\n    event ExecSuccess(\\n        uint256 indexed txFee,\\n        address indexed feeToken,\\n        address indexed execAddress,\\n        bytes execData\\n    );\\n\\n    function createTask(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData\\n    ) external {\\n        bytes32 _task = getTaskId(msg.sender, _execAddress, _execSelector);\\n\\n        require(\\n            calleeOfTask[_task] == address(0),\\n            \\\"PokeMe: createTask: Sender already started task\\\"\\n        );\\n\\n        _createdTasks[msg.sender].add(_task);\\n        calleeOfTask[_task] = msg.sender;\\n        execAddresses[_task] = _execAddress;\\n\\n        emit TaskCreated(\\n            msg.sender,\\n            _execAddress,\\n            _execSelector,\\n            _resolverAddress,\\n            _task,\\n            _resolverData\\n        );\\n    }\\n\\n    function cancelTask(bytes32 _task) external {\\n        require(\\n            calleeOfTask[_task] != address(0),\\n            \\\"PokeMe: cancelTask: Sender did not start task yet\\\"\\n        );\\n\\n        _createdTasks[msg.sender].remove(_task);\\n        delete calleeOfTask[_task];\\n        delete execAddresses[_task];\\n\\n        emit TaskCancelled(_task);\\n    }\\n\\n    function exec(\\n        uint256 _txFee,\\n        address _feeToken,\\n        address _callee,\\n        address _execAddress,\\n        bytes calldata _execData\\n    ) external onlyGelato {\\n\\n        bytes32 task = getTaskId(\\n            _callee,\\n            _execAddress,\\n            _execData.calldataSliceSelector()\\n        );\\n\\n        address callee = calleeOfTask[task];\\n        require(callee == _callee, \\\"PokeMe: exec: No task found\\\");\\n\\n        (bool success, ) = _execAddress.call(_execData);\\n        require(success, \\\"PokeMe: exec: Execution failed\\\");\\n\\n        TaskTreasury(taskTreasury).useFunds(_feeToken, _txFee, callee);\\n\\n        emit ExecSuccess(_txFee, _feeToken, _execAddress, _execData);\\n    }\\n\\n    function getTaskId(\\n        address _callee,\\n        address _execAddress,\\n        bytes4 _selector\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_callee, _execAddress, _selector));\\n    }\\n\\n    /// @dev Example: \\\"transferFrom(address,address,uint256)\\\" => 0x23b872dd\\n    function getSelector(string calldata _func) external pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(_func)));\\n    }\\n\\n    function getTaskIdsByUser(address _callee)\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        uint256 length = _createdTasks[_callee].length();\\n        bytes32[] memory taskIds = new bytes32[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            taskIds[i] = _createdTasks[_callee].at(i);\\n        }\\n\\n        return taskIds;\\n    }\\n}\\n\",\"keccak256\":\"0x592bcd61ea01ff5901ef6487ce54e9bd07c99418ba898b72ce65786eb2fa8eef\",\"license\":\"UNLICENSED\"},\"contracts/TaskTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {_transfer, ETH} from \\\"./FGelato.sol\\\";\\n\\ncontract TaskTreasury is Ownable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => mapping(address => uint256)) public userTokenBalance;\\n    mapping(address => EnumerableSet.AddressSet) internal _tokenCredits;\\n    mapping(address => bool) public whitelistedServices;\\n    address payable public immutable gelato;\\n\\n    event FundsDeposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n    event FundsWithdrawn(\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    constructor(address payable _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    modifier onlyWhitelistedServices() {\\n        require(\\n            whitelistedServices[msg.sender],\\n            \\\"TaskTreasury: onlyWhitelistedServices\\\"\\n        );\\n        _;\\n    }\\n\\n    function depositFunds(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) external payable {\\n        uint256 depositAmount;\\n        if (_token == ETH) {\\n            depositAmount = msg.value;\\n        } else {\\n            IERC20 token = IERC20(_token);\\n            uint256 preBalance = token.balanceOf(address(this));\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 postBalance = token.balanceOf(address(this));\\n            depositAmount = postBalance - preBalance;\\n        }\\n\\n        userTokenBalance[_receiver][_token] =\\n            userTokenBalance[_receiver][_token] +\\n            depositAmount;\\n\\n        if (!_tokenCredits[msg.sender].contains(_token))\\n            _tokenCredits[msg.sender].add(_token);\\n\\n        emit FundsDeposited(_receiver, _token, depositAmount);\\n    }\\n\\n    function withdrawFunds(address _token, uint256 _amount)\\n        external\\n        nonReentrant\\n    {\\n        uint256 balance = userTokenBalance[msg.sender][_token];\\n\\n        uint256 withdrawAmount = Math.min(balance, _amount);\\n\\n        userTokenBalance[msg.sender][_token] = balance - withdrawAmount;\\n\\n        _transfer(payable(msg.sender), _token, withdrawAmount);\\n\\n        if (withdrawAmount == balance) _tokenCredits[msg.sender].remove(_token);\\n\\n        emit FundsWithdrawn(msg.sender, _token, withdrawAmount);\\n    }\\n\\n    function useFunds(\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external onlyWhitelistedServices {\\n        uint256 _balanceOfCallee = userTokenBalance[_user][_token];\\n\\n        userTokenBalance[_user][_token] = _balanceOfCallee - _amount;\\n\\n        _transfer(gelato, _token, _amount);\\n    }\\n\\n    // Governance functions\\n    function addWhitelistedService(address _service) external onlyOwner {\\n        require(\\n            whitelistedServices[_service] == false,\\n            \\\"TaskTreasury: addWhitelistedService: whitelisted\\\"\\n        );\\n        whitelistedServices[_service] = true;\\n    }\\n\\n    // Governance functions\\n    function removeWhitelistedService(address _service) external onlyOwner {\\n        require(\\n            whitelistedServices[_service] == true,\\n            \\\"TaskTreasury: addWhitelistedService: !whitelisted\\\"\\n        );\\n        whitelistedServices[_service] = false;\\n    }\\n\\n    // View Funcs\\n    function getCreditTokensByUser(address _callee)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 length = _tokenCredits[_callee].length();\\n        address[] memory creditTokens = new address[](length);\\n\\n        for (uint256 i; i < length; i++) {\\n            creditTokens[i] = _tokenCredits[_callee].at(i);\\n        }\\n\\n        return creditTokens;\\n    }\\n}\\n\",\"keccak256\":\"0x182d0864cb0bfb54d998325621b1574285ceefb9341d7a1de49641ecf6c80170\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001daf38038062001daf8339818101604052810190620000379190620000dd565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200019a565b600081519050620000c08162000166565b92915050565b600081519050620000d78162000180565b92915050565b60008060408385031215620000f157600080fd5b60006200010185828601620000c6565b92505060206200011485828601620000af565b9150509250929050565b60006200012b8262000146565b9050919050565b60006200013f8262000146565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b62000171816200011e565b81146200017d57600080fd5b50565b6200018b8162000132565b81146200019757600080fd5b50565b60805160601c60a05160601c611bdb620001d4600039600081816106270152610a3401526000818161042d01526107980152611bdb6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063618472271161007157806361847227146101a15780636d2dd29f146101d157806380a003ff146102015780638b92696a14610231578063e60a32131461024d578063ee8ca3b51461026b576100b4565b80630407145c146100b9578063215a43ca146100e957806347e283d81461011957806352e0ac5e1461013557806354fd4d5014610165578063573ea57514610183575b600080fd5b6100d360048036038101906100ce91906111ba565b610287565b6040516100e091906117fc565b60405180910390f35b61010360048036038101906100fe91906111e3565b610406565b604051610110919061193a565b60405180910390f35b610133600480360381019061012e919061135c565b61042b565b005b61014f600480360381019061014a919061121f565b610727565b60405161015c919061181e565b60405180910390f35b61016d61075d565b60405161017a9190611878565b60405180910390f35b61018b610796565b6040516101989190611709565b60405180910390f35b6101bb60048036038101906101b691906112ee565b6107ba565b6040516101c891906116ee565b60405180910390f35b6101eb60048036038101906101e691906112ee565b6107ed565b6040516101f891906116ee565b60405180910390f35b61021b60048036038101906102169190611317565b610820565b6040516102289190611839565b60405180910390f35b61024b6004803603810190610246919061126e565b610842565b005b610255610a32565b60405161026291906116ee565b60405180910390f35b610285600480360381019061028091906112ee565b610a56565b005b606060006102d2600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610bef565b905060008167ffffffffffffffff811115610316577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103445781602001602082028036833780820191505090505b50905060005b828110156103fb576103a381600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610c0490919063ffffffff16565b8282815181106103dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806103f390611ac0565b91505061034a565b508092505050919050565b6002602052816000526040600020602052806000526040600020600091509150505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09061189a565b60405180910390fd5b60006104cf85856104ca8686610c1b565b610727565b9050600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d906118ba565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff16858560405161059f9291906116d5565b6000604051808303816000865af19150503d80600081146105dc576040519150601f19603f3d011682016040523d82523d6000602084013e6105e1565b606091505b5050905080610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c906118da565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc898b856040518463ffffffff1660e01b8152600401610682939291906117c5565b600060405180830381600087803b15801561069c57600080fd5b505af11580156106b0573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a7f66a4a8f38001cd244b1836cb610e638d1cea110cf51ab035c6dc9d1c0264f83a8888604051610714929190611854565b60405180910390a4505050505050505050565b600083838360405160200161073e93929190611724565b6040516020818303038152906040528051906020012090509392505050565b6040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516108329291906116d5565b6040518091039020905092915050565b600061084f338787610727565b9050600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e99061191a565b60405180910390fd5b61094381600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e2990919063ffffffff16565b503360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9d59214787f3824da2b165425d040688cd7dc25a540e26c05200d2b92c248bf933878787858888604051610a22979695949392919061175b565b60405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef906118fa565b60405180910390fd5b610b4981600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e4090919063ffffffff16565b5060008082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fe1e1d79b8f28d3379fc32f617eaf54dd6bd4071074c77e91134770e04a81d62681604051610be4919061181e565b60405180910390a150565b6000610bfd82600001610e57565b9050919050565b6000610c138360000183610e68565b905092915050565b6000601883836003818110610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c601084846002818110610ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c600885856001818110610d6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c85856000818110610df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b6000610e388360000183610eb9565b905092915050565b6000610e4f8360000183610f29565b905092915050565b600081600001805490509050919050565b6000826000018281548110610ea6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000610ec583836110af565b610f1e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610f23565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146110a3576000600182610f5b91906119c6565b9050600060018660000180549050610f7391906119c6565b905081811461102e576000866000018281548110610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611004577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611068577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506110a9565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000813590506110e181611b49565b92915050565b6000813590506110f681611b60565b92915050565b60008135905061110b81611b77565b92915050565b60008083601f84011261112357600080fd5b8235905067ffffffffffffffff81111561113c57600080fd5b60208301915083600182028301111561115457600080fd5b9250929050565b60008083601f84011261116d57600080fd5b8235905067ffffffffffffffff81111561118657600080fd5b60208301915083600182028301111561119e57600080fd5b9250929050565b6000813590506111b481611b8e565b92915050565b6000602082840312156111cc57600080fd5b60006111da848285016110d2565b91505092915050565b600080604083850312156111f657600080fd5b6000611204858286016110d2565b9250506020611215858286016110d2565b9150509250929050565b60008060006060848603121561123457600080fd5b6000611242868287016110d2565b9350506020611253868287016110d2565b9250506040611264868287016110fc565b9150509250925092565b60008060008060006080868803121561128657600080fd5b6000611294888289016110d2565b95505060206112a5888289016110fc565b94505060406112b6888289016110d2565b935050606086013567ffffffffffffffff8111156112d357600080fd5b6112df88828901611111565b92509250509295509295909350565b60006020828403121561130057600080fd5b600061130e848285016110e7565b91505092915050565b6000806020838503121561132a57600080fd5b600083013567ffffffffffffffff81111561134457600080fd5b6113508582860161115b565b92509250509250929050565b60008060008060008060a0878903121561137557600080fd5b600061138389828a016111a5565b965050602061139489828a016110d2565b95505060406113a589828a016110d2565b94505060606113b689828a016110d2565b935050608087013567ffffffffffffffff8111156113d357600080fd5b6113df89828a01611111565b92509250509295509295509295565b60006113fa8383611482565b60208301905092915050565b61140f81611a0c565b82525050565b61141e816119fa565b82525050565b600061142f82611965565b6114398185611988565b935061144483611955565b8060005b8381101561147557815161145c88826113ee565b97506114678361197b565b925050600181019050611448565b5085935050505092915050565b61148b81611a1e565b82525050565b61149a81611a1e565b82525050565b6114a981611a28565b82525050565b60006114bb8385611999565b93506114c8838584611a7e565b6114d183611b38565b840190509392505050565b60006114e883856119aa565b93506114f5838584611a7e565b82840190509392505050565b600061150c82611970565b61151681856119b5565b9350611526818560208601611a8d565b61152f81611b38565b840191505092915050565b60006115476017836119b5565b91507f47656c61746f666965643a204f6e6c792067656c61746f0000000000000000006000830152602082019050919050565b6000611587601b836119b5565b91507f506f6b654d653a20657865633a204e6f207461736b20666f756e6400000000006000830152602082019050919050565b60006115c7601e836119b5565b91507f506f6b654d653a20657865633a20457865637574696f6e206661696c656400006000830152602082019050919050565b60006116076031836119b5565b91507f506f6b654d653a2063616e63656c5461736b3a2053656e64657220646964206e60008301527f6f74207374617274207461736b207965740000000000000000000000000000006020830152604082019050919050565b600061166d602f836119b5565b91507f506f6b654d653a206372656174655461736b3a2053656e64657220616c72656160008301527f64792073746172746564207461736b00000000000000000000000000000000006020830152604082019050919050565b6116cf81611a74565b82525050565b60006116e28284866114dc565b91508190509392505050565b60006020820190506117036000830184611415565b92915050565b600060208201905061171e6000830184611406565b92915050565b60006060820190506117396000830186611415565b6117466020830185611415565b61175360408301846114a0565b949350505050565b600060c082019050611770600083018a611415565b61177d6020830189611415565b61178a60408301886114a0565b6117976060830187611415565b6117a46080830186611491565b81810360a08301526117b78184866114af565b905098975050505050505050565b60006060820190506117da6000830186611415565b6117e760208301856116c6565b6117f46040830184611415565b949350505050565b600060208201905081810360008301526118168184611424565b905092915050565b60006020820190506118336000830184611491565b92915050565b600060208201905061184e60008301846114a0565b92915050565b6000602082019050818103600083015261186f8184866114af565b90509392505050565b600060208201905081810360008301526118928184611501565b905092915050565b600060208201905081810360008301526118b38161153a565b9050919050565b600060208201905081810360008301526118d38161157a565b9050919050565b600060208201905081810360008301526118f3816115ba565b9050919050565b60006020820190508181036000830152611913816115fa565b9050919050565b6000602082019050818103600083015261193381611660565b9050919050565b600060208201905061194f60008301846116c6565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006119d182611a74565b91506119dc83611a74565b9250828210156119ef576119ee611b09565b5b828203905092915050565b6000611a0582611a54565b9050919050565b6000611a1782611a54565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611aab578082015181840152602081019050611a90565b83811115611aba576000848401525b50505050565b6000611acb82611a74565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611afe57611afd611b09565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b611b52816119fa565b8114611b5d57600080fd5b50565b611b6981611a1e565b8114611b7457600080fd5b50565b611b8081611a28565b8114611b8b57600080fd5b50565b611b9781611a74565b8114611ba257600080fd5b5056fea264697066735822122017d179e7c503b3c8587ae3115acb0fc56e2f40ac01f733fb3bc5b54db39a7a1c64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063618472271161007157806361847227146101a15780636d2dd29f146101d157806380a003ff146102015780638b92696a14610231578063e60a32131461024d578063ee8ca3b51461026b576100b4565b80630407145c146100b9578063215a43ca146100e957806347e283d81461011957806352e0ac5e1461013557806354fd4d5014610165578063573ea57514610183575b600080fd5b6100d360048036038101906100ce91906111ba565b610287565b6040516100e091906117fc565b60405180910390f35b61010360048036038101906100fe91906111e3565b610406565b604051610110919061193a565b60405180910390f35b610133600480360381019061012e919061135c565b61042b565b005b61014f600480360381019061014a919061121f565b610727565b60405161015c919061181e565b60405180910390f35b61016d61075d565b60405161017a9190611878565b60405180910390f35b61018b610796565b6040516101989190611709565b60405180910390f35b6101bb60048036038101906101b691906112ee565b6107ba565b6040516101c891906116ee565b60405180910390f35b6101eb60048036038101906101e691906112ee565b6107ed565b6040516101f891906116ee565b60405180910390f35b61021b60048036038101906102169190611317565b610820565b6040516102289190611839565b60405180910390f35b61024b6004803603810190610246919061126e565b610842565b005b610255610a32565b60405161026291906116ee565b60405180910390f35b610285600480360381019061028091906112ee565b610a56565b005b606060006102d2600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610bef565b905060008167ffffffffffffffff811115610316577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103445781602001602082028036833780820191505090505b50905060005b828110156103fb576103a381600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610c0490919063ffffffff16565b8282815181106103dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806103f390611ac0565b91505061034a565b508092505050919050565b6002602052816000526040600020602052806000526040600020600091509150505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b09061189a565b60405180910390fd5b60006104cf85856104ca8686610c1b565b610727565b9050600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d906118ba565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff16858560405161059f9291906116d5565b6000604051808303816000865af19150503d80600081146105dc576040519150601f19603f3d011682016040523d82523d6000602084013e6105e1565b606091505b5050905080610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c906118da565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636f192acc898b856040518463ffffffff1660e01b8152600401610682939291906117c5565b600060405180830381600087803b15801561069c57600080fd5b505af11580156106b0573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a7f66a4a8f38001cd244b1836cb610e638d1cea110cf51ab035c6dc9d1c0264f83a8888604051610714929190611854565b60405180910390a4505050505050505050565b600083838360405160200161073e93929190611724565b6040516020818303038152906040528051906020012090509392505050565b6040518060400160405280600181526020017f320000000000000000000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082826040516108329291906116d5565b6040518091039020905092915050565b600061084f338787610727565b9050600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e99061191a565b60405180910390fd5b61094381600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e2990919063ffffffff16565b503360008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9d59214787f3824da2b165425d040688cd7dc25a540e26c05200d2b92c248bf933878787858888604051610a22979695949392919061175b565b60405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef906118fa565b60405180910390fd5b610b4981600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610e4090919063ffffffff16565b5060008082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fe1e1d79b8f28d3379fc32f617eaf54dd6bd4071074c77e91134770e04a81d62681604051610be4919061181e565b60405180910390a150565b6000610bfd82600001610e57565b9050919050565b6000610c138360000183610e68565b905092915050565b6000601883836003818110610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c601084846002818110610ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c600885856001818110610d6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c85856000818110610df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171717905092915050565b6000610e388360000183610eb9565b905092915050565b6000610e4f8360000183610f29565b905092915050565b600081600001805490509050919050565b6000826000018281548110610ea6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000610ec583836110af565b610f1e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610f23565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146110a3576000600182610f5b91906119c6565b9050600060018660000180549050610f7391906119c6565b905081811461102e576000866000018281548110610fba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611004577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611068577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506110a9565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000813590506110e181611b49565b92915050565b6000813590506110f681611b60565b92915050565b60008135905061110b81611b77565b92915050565b60008083601f84011261112357600080fd5b8235905067ffffffffffffffff81111561113c57600080fd5b60208301915083600182028301111561115457600080fd5b9250929050565b60008083601f84011261116d57600080fd5b8235905067ffffffffffffffff81111561118657600080fd5b60208301915083600182028301111561119e57600080fd5b9250929050565b6000813590506111b481611b8e565b92915050565b6000602082840312156111cc57600080fd5b60006111da848285016110d2565b91505092915050565b600080604083850312156111f657600080fd5b6000611204858286016110d2565b9250506020611215858286016110d2565b9150509250929050565b60008060006060848603121561123457600080fd5b6000611242868287016110d2565b9350506020611253868287016110d2565b9250506040611264868287016110fc565b9150509250925092565b60008060008060006080868803121561128657600080fd5b6000611294888289016110d2565b95505060206112a5888289016110fc565b94505060406112b6888289016110d2565b935050606086013567ffffffffffffffff8111156112d357600080fd5b6112df88828901611111565b92509250509295509295909350565b60006020828403121561130057600080fd5b600061130e848285016110e7565b91505092915050565b6000806020838503121561132a57600080fd5b600083013567ffffffffffffffff81111561134457600080fd5b6113508582860161115b565b92509250509250929050565b60008060008060008060a0878903121561137557600080fd5b600061138389828a016111a5565b965050602061139489828a016110d2565b95505060406113a589828a016110d2565b94505060606113b689828a016110d2565b935050608087013567ffffffffffffffff8111156113d357600080fd5b6113df89828a01611111565b92509250509295509295509295565b60006113fa8383611482565b60208301905092915050565b61140f81611a0c565b82525050565b61141e816119fa565b82525050565b600061142f82611965565b6114398185611988565b935061144483611955565b8060005b8381101561147557815161145c88826113ee565b97506114678361197b565b925050600181019050611448565b5085935050505092915050565b61148b81611a1e565b82525050565b61149a81611a1e565b82525050565b6114a981611a28565b82525050565b60006114bb8385611999565b93506114c8838584611a7e565b6114d183611b38565b840190509392505050565b60006114e883856119aa565b93506114f5838584611a7e565b82840190509392505050565b600061150c82611970565b61151681856119b5565b9350611526818560208601611a8d565b61152f81611b38565b840191505092915050565b60006115476017836119b5565b91507f47656c61746f666965643a204f6e6c792067656c61746f0000000000000000006000830152602082019050919050565b6000611587601b836119b5565b91507f506f6b654d653a20657865633a204e6f207461736b20666f756e6400000000006000830152602082019050919050565b60006115c7601e836119b5565b91507f506f6b654d653a20657865633a20457865637574696f6e206661696c656400006000830152602082019050919050565b60006116076031836119b5565b91507f506f6b654d653a2063616e63656c5461736b3a2053656e64657220646964206e60008301527f6f74207374617274207461736b207965740000000000000000000000000000006020830152604082019050919050565b600061166d602f836119b5565b91507f506f6b654d653a206372656174655461736b3a2053656e64657220616c72656160008301527f64792073746172746564207461736b00000000000000000000000000000000006020830152604082019050919050565b6116cf81611a74565b82525050565b60006116e28284866114dc565b91508190509392505050565b60006020820190506117036000830184611415565b92915050565b600060208201905061171e6000830184611406565b92915050565b60006060820190506117396000830186611415565b6117466020830185611415565b61175360408301846114a0565b949350505050565b600060c082019050611770600083018a611415565b61177d6020830189611415565b61178a60408301886114a0565b6117976060830187611415565b6117a46080830186611491565b81810360a08301526117b78184866114af565b905098975050505050505050565b60006060820190506117da6000830186611415565b6117e760208301856116c6565b6117f46040830184611415565b949350505050565b600060208201905081810360008301526118168184611424565b905092915050565b60006020820190506118336000830184611491565b92915050565b600060208201905061184e60008301846114a0565b92915050565b6000602082019050818103600083015261186f8184866114af565b90509392505050565b600060208201905081810360008301526118928184611501565b905092915050565b600060208201905081810360008301526118b38161153a565b9050919050565b600060208201905081810360008301526118d38161157a565b9050919050565b600060208201905081810360008301526118f3816115ba565b9050919050565b60006020820190508181036000830152611913816115fa565b9050919050565b6000602082019050818103600083015261193381611660565b9050919050565b600060208201905061194f60008301846116c6565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006119d182611a74565b91506119dc83611a74565b9250828210156119ef576119ee611b09565b5b828203905092915050565b6000611a0582611a54565b9050919050565b6000611a1782611a54565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611aab578082015181840152602081019050611a90565b83811115611aba576000848401525b50505050565b6000611acb82611a74565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611afe57611afd611b09565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b611b52816119fa565b8114611b5d57600080fd5b50565b611b6981611a1e565b8114611b7457600080fd5b50565b611b8081611a28565b8114611b8b57600080fd5b50565b611b9781611a74565b8114611ba257600080fd5b5056fea264697066735822122017d179e7c503b3c8587ae3115acb0fc56e2f40ac01f733fb3bc5b54db39a7a1c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getSelector(string)": {
        "details": "Example: \"transferFrom(address,address,uint256)\" => 0x23b872dd"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2309,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "calleeOfTask",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2313,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "execAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2319,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "balanceOfCallee",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2324,
        "contract": "contracts/PokeMe2.sol:PokeMe2",
        "label": "_createdTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1365_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1365_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1365_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)1365_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1364,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1185_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1185_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1180,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1184,
            "contract": "contracts/PokeMe2.sol:PokeMe2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
